Уровни Изоляции Транзакций в MySQL
==================================

Получить текущий уровень изоляции в MySQL
-----------------------------------------

Чтобы получить уровень изоляции транзакций текущего сеанса, мы можем запустить

.. code-block:: sql
  :linenos:

    select @@transaction_isolation;

По умолчанию это **repeatable read**.
Этот уровень применяется только к этому конкретному сеансу консоли MySQL.

Существует также глобальный уровень изоляции,
который применяется ко всем сеансам при их первом запуске.
Мы можем получить его значение, добавив global к предыдущему запросу на выборку.

.. code-block:: sql
  :linenos:

    select @@global.transaction_isolation;


По умолчанию тоже **repeatable read**.

.. image:: ../../img/mysql/004-mysql-transaction-level.png
  :width: 919
  :alt: transaction isolation level


Изменить уровень изоляции в MySQL
---------------------------------

Теперь, чтобы изменить уровень изоляции текущего сеанса,
мы можем использовать этот запрос:

.. code-block:: sql
  :linenos:

    set session transaction isolation level read uncommitted;


Вы можете заменить **read uncommitted**
именем уровня изоляции, который вы хотите установить.

После этого, если мы снова запустим select,
мы увидим, что она была изменена на **read uncommitted**.

.. image:: ../../img/mysql/005-mysql-change-transaction-level.png
  :width: 916
  :alt: change transaction isolation level

.. warning::
    **Обратите внимание**,
    что это изменение повлияет только
    на все будущие транзакции этого текущего сеанса,
    но не на транзакции,
    которые выполняются в другом сеансе консоли MySQL.


Чтение незафиксированного уровня изоляции в MySQL
-------------------------------------------------

Dirty Read
~~~~~~~~~~

Хорошо, теперь, чтобы продемонстрировать взаимодействие
между двумя одновременными транзакциями,
я открою другое окно терминала,
поставлю его рядом с этим и запущу внутри него новую консоль MySQL.
Затем давайте также установим уровень изоляции этого сеанса read uncommitted.

Хорошо, теперь оба сеанса работают на **read uncommitted** уровне изоляции.
Теперь мы можем начать новую транзакцию.

В MySQL мы можем либо использовать **start transaction**
оператор, либо просто использовать **begin**
оператор в качестве альтернативы.

.. image:: ../../img/mysql/006-dirty-read.png
  :width: 1723
  :alt: mysql dirty read

Запустим все в следующей последовательности
Откроем два терминала Term1, Term2

Выполним строки 1,2,3 в Term1 затем в Term2
* это установка уровня и начало транзакции

Выполним строки 4,5 в Term1 затем в Term2
* здесь мы смотрим какие данный видны в каждой транзакции

Выполним строки 7,8 в Term1 затем в Term2
* 7-ая строка изменяет данные в транзакции 1
* 8-ая строка читает данные которые видны транзакции

В результате мы увидим **Грязное Чтение**.
Одна транзакция видит незакомиченные изменения другой транзакции.
Т.е. мы первую транзакцию в которой изменили данные еще не закомитили
а вторая транзакция уже видит изменения.
Это и называется **Dirty Read**

Чтение зафиксированного уровня изоляции в MySQL
-----------------------------------------------

Non-Repeatable и Phantom Read
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Начинаем снова но уровень изоляции увеличим
Снова откроем два терминала.
Оба сеанса будут работать на **read committed** уровне изоляции.
Начинаем новую транзакцию.

.. image:: ../../img/mysql/007-non-repeatable-phantom-read-1.png
  :width: 1723
  :alt: mysql non-repeatable, phantom read - part 1

Запустим все в следующей последовательности
Откроем два терминала Term1, Term2

Выполним строки 1,2,3 в Term1 затем в Term2
* это установка уровня и начало транзакции

Выполним строки 4,5 в Term1 затем в Term2
* здесь мы смотрим какие данный видны в каждой транзакции

Выполним строки 7,8 в Term1 затем в Term2
* 7-ая строка изменяет данные в транзакции 1
* 8-ая строка читает данные которые видны транзакции

На этом шаге мы видим что **dirty read** отсутствует
Вторая транзакция не видит изменений сделанных первой транзакцией.


.. image:: ../../img/mysql/008-non-repeatable-phantom-read-2.png
  :width: 1723
  :alt: mysql non-repeatable, phantom read - part 2


Выполним строку 10 в Term2
* здесь мы получаем Набор строк удовлетворяющий определенным условиям
и мы видим что в наборе возвращается 3 строки не учитывающие изменения первой транзакции.

Выполним строку 12 в Term1
* мы закомитили изменения в первой транзакции. транзакция 1 завершилась.
Но вторая транзакция все еще не закрыта.

Выполним строку 14 в Term2
* мы видим что вторая транзакция увидела изменения сделанные первой транзакцией.
такой же запрос мы выполнили на строке 8 и это было ДО того как закрылась первая транзакция
и получается что в течении транзакции один и тот же запрос вернул разные данные.
Это и называется **non-repeatable read**

Выполним строку 16 в Term2
* такой же запрос мы выполняли на строке 10 и это было ДО того как закрылась первая транзакция
в первый раз мы получили 3 строки, а теперь когда первая транзакция завершилась 2 строки
это и называется **phantom-read**
